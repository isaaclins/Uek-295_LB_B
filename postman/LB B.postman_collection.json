{
	"info": {
		"_postman_id": "33c1e81e-9c8e-4bc9-8c2e-7b258f12d661",
		"name": "LB B",
		"description": "yuhhh isaac lins",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36249341"
	},
	"item": [
		{
			"name": "get",
			"item": [
				{
					"name": "login process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      message: {\r",
									"        type: \"string\"\r",
									"      },\r",
									"      token: {\r",
									"        type: \"string\"\r",
									"      }\r",
									"    },\r",
									"    required: [\"token\"],\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"token should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"esxample@example.com\",\r\n    \"password\": \"m295\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check the response content type\r",
									"pm.test(\"Response has content type application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"// Test to validate the response structure and attributes for each item\r",
									"pm.test(\"Each task object has the required properties\", function () {\r",
									"  responseJSON.forEach((task) => {\r",
									"    pm.expect(task).to.have.property('id');\r",
									"    pm.expect(task).to.have.property('title');\r",
									"    pm.expect(task).to.have.property('description');\r",
									"    pm.expect(task).to.have.property('done');\r",
									"    pm.expect(task).to.have.property('dueDate');\r",
									"  });\r",
									"});\r",
									"// Test to check if the status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/tasks",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "login process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      message: {\r",
									"        type: \"string\"\r",
									"      },\r",
									"      token: {\r",
									"        type: \"string\"\r",
									"      }\r",
									"    },\r",
									"    required: [\"token\"],\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"token should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"esxample@example.com\",\r\n    \"password\": \"m295\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "verify token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "6zckiv2xbbk",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/verify",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"verify"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "post",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      message: {\r",
									"        type: \"string\"\r",
									"      },\r",
									"      token: {\r",
									"        type: \"string\"\r",
									"      }\r",
									"    },\r",
									"    required: [\"token\"],\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"token should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"esxample@example.com\",\r\n    \"password\": \"m295\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "post one task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.title).to.exist;",
									"    pm.expect(responseData.description).to.exist;",
									"    pm.expect(responseData.done).to.exist;",
									"    pm.expect(responseData.dueDate).to.exist;",
									"    pm.expect(responseData.id).to.exist;",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Task 11\",\r\n    \"description\": \"This is task 11\",\r\n    \"done\": false,\r\n    \"dueDate\": \"2024-05-31\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/tasks",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delete",
			"item": [
				{
					"name": "login process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      message: {\r",
									"        type: \"string\"\r",
									"      },\r",
									"      token: {\r",
									"        type: \"string\"\r",
									"      }\r",
									"    },\r",
									"    required: [\"token\"],\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"token should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"esxample@example.com\",\r\n    \"password\": \"m295\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete task by id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bcivr1hoig",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/tasks/:id",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"tasks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      message: {\r",
									"        type: \"string\"\r",
									"      },\r",
									"      token: {\r",
									"        type: \"string\"\r",
									"      }\r",
									"    },\r",
									"    required: [\"token\"],\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"token should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"esxample@example.com\",\r\n    \"password\": \"m295\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is null or empty\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/logout",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "put",
			"item": [
				{
					"name": "login process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      message: {\r",
									"        type: \"string\"\r",
									"      },\r",
									"      token: {\r",
									"        type: \"string\"\r",
									"      }\r",
									"    },\r",
									"    required: [\"token\"],\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"token should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"esxample@example.com\",\r\n    \"password\": \"m295\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "update task by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"// Test to validate the response schema\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      id: { type: \"number\" },\r",
									"      title: { type: \"string\" },\r",
									"      description: { type: \"string\" },\r",
									"      done: { type: \"boolean\" },\r",
									"      dueDate: { type: \"string\" }\r",
									"    },\r",
									"    required: [\"id\", \"title\", \"description\", \"done\", \"dueDate\"]\r",
									"  };\r",
									"\r",
									"  pm.expect(tv4.validate(responseJSON, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Updated Task\",\r\n  \"description\": \"This is an updated task\",\r\n  \"done\": true,\r\n  \"dueDate\": \"2024-01-31\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/tasks/:id",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"tasks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "244"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}